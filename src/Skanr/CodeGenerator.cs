using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Skanr
{
    internal class CodeGenerator
    {
        private const string DEFAULT_GROUP_NAME = "Default";
        private readonly StringBuilder _code;
        private readonly List<PendingRegistration> _pendingRegistrations = new();

        public CodeGenerator(string nameSpace)
        {
            _code = new StringBuilder();
            _code.AppendLine("// <auto-generated />");
            _code.AppendLine("using Microsoft.Extensions.DependencyInjection;");
            _code.AppendLine();
            _code.AppendLine($"namespace {nameSpace};");
            _code.AppendLine();
            _code.AppendLine("public static partial class SkanrServiceRegistration");
            _code.AppendLine("{");
            _code.AppendLine("    static partial void RegisterAdditionalServices(IServiceCollection services);");
            _code.AppendLine();
            _code.AppendLine("    public static void RegisterServices(this IServiceCollection services)");
            _code.AppendLine("    {");
        }

        private int _indentLevel = 2;

        public void AddPendingRegistrations(params IEnumerable<PendingRegistration> prs)
            => _pendingRegistrations.AddRange(prs);

        public override string ToString()
        {
            IGrouping<string, PendingRegistration>[] groups = _pendingRegistrations.GroupBy(pr => pr.GroupName)
                                                                                   .ToArray();

            foreach(var group in groups)
            {
                var ppBlocks = group.GroupBy(y => y.PreprocessorLabel)
                                    .ToArray();

                // Write the #region for the group
                _code.AppendLine($"    #region {group.Key}");

                foreach (var block in ppBlocks)
                {
                    var closeIf = false;
                    
                    if (!string.IsNullOrEmpty(block.Key))
                    {
                        // Write the #if for the preprocessor block
                        _code.AppendLine($"    #if {block.Key}");
                        closeIf = true;
                    }

                    foreach(var registration in block)
                    {
                        var interfaceName = registration.ServiceType.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat);
                        var implName = registration.ImplementationType.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat);
                        _code.AppendLine($"        services.Add{registration.Lifetime}<{interfaceName}, {implName}>();");
                    }

                    if(!closeIf) 
                        continue;

                    // Write the #endif for the preprocessor block
                    _code.AppendLine("    #endif");
                    _code.AppendLine();
                }

                // Write the #endregion for the group
                _code.AppendLine("    #endregion");
                _code.AppendLine();
            }

            // Write the call to the additional services method
            _code.AppendLine();
            _code.AppendLine("        RegisterAdditionalServices(services);");
            _code.AppendLine("    }");
            _code.AppendLine("}");

            return _code.ToString();
        }
    }
}